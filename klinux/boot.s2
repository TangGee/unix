!boot.s 程序
!首先利用BIOS中断把（head代码）加载到内存0x10000处，然后移动到内存0处。
!最后进入保护模式，并远眺到内存0（head代码）开始处继续运行。
BOOTSEG = 0x07c0  ;引导山区（本程序）被BIOS加载到内存0x7c00处。
SYSSEG = 0x1000   ; 内核（head）先加载到0x10000处，然后转移到0x0处。
SYSLEN = 17       ; 内核占用的最大磁盘山区数
entry start
start:
        jmpi  go,#BOOTSEG !段间跳转至0x7c0：go处。当本程序刚运行时所有段寄存器
go:     mov   ax,cs       !均为0.该跳转语句会把CS寄存器加载为0x7c0（原为0）。
        mov   ds,ax       !让DS和SS都只想0x7c0段
        mov   es,ax
        mov   sp,#0x400   !设置临时栈指针，其值需要大于程序末端有一定空间即可
!加载内核代码到内存0x10000开始处
load_system:
        mov   dx,#0x0000     !利用BIOS终端int 0x13功能2从启动盘读取head代码。
        mov   cx,#0x0002     !DH  - 磁头号;DL - 驱动器号; CH：10位磁道号低八位
        mov   ax,#SYSSEG     !CL --位6,7是磁道高2位，位5-0起始扇区号（从1计）。
        mov   es,ax          !ES：BX -读入缓冲区位置（0x1000：0x0000）
        xor   bx,bx          ! AH-读山区功能好 AL-需要读的山区（17）
        mov   ax,#0x200+SYSLEN
        int   0x13
        jnc   ok_load
die:    jmp   die

!把内核代码移动到内存0开始处，共此时那个一佛那个8kb字节（内核长度不超过8kb）
ok_load:
        cli                  !关中断
        mov   ax,#SYSSEG     !移动开始位置DS：SI=0x1000：0;目的位置ES：DI=
        mov   ds, ax
        xor   ax, ax
        mov   es, ax
        mov   cx,#0x1000     !设置移动4k次，每次移动一个字（word）。
        sub   si,si
        sub   di,di
        rep   movw
!加载IDT和GDT及地址寄存器IDTR和GDTR。
        mov   ax, #BOOTSEG
        mov   ds, ax                  !让DS重新指向0x7c0段。
        lidt  idt_48        !加载LDTR 6自己操作数：2字节表长度，4字节现行及地址
        lgdt  gdt_48        !加载GDTR 6字节操作书：2字节表长度，4字节现行及地址
!设置控制寄存器CR0（即机器转台字），进入保护模式。段选择符值8应对应GDT表中第二个!段描述符
        mov ax,#0x0001      !在CR0中设置保护模式标志为PE（位0）
        lmsw  ax            !加载0-15位到cr0 然后跳转到便宜地址0处
        jmpi  0,8           !注意此时段值已是段选择符 该段的现行地址是0
!下面是全局描述符表GDT的内容。其中包含3个段描述符。第1个不用，另2个是代码和数据
!段描述副。
  gdt:  .word   0,0,0,0   !段描述符0 不用 每个描述副占8个字节。
        .word   0x07FF    !描述符1。8Mb-段限长值=2047  这是段限长度
        .word   0x0000    !段及地址=0x0000
        .word   0x9A00    !是代码段 可读/执行1001 1010 0000 0000
        .word   0x00C0    !段属性颗粒度=4KB 80386
! gdt描述副1 g=1：单位为4KB  D/B=1：32位总数据或代码段设为1 S=1：代码或数据段AVL=0这是专用软件设置为1  p=1 存在  DPL=0 特权级0 TYPE=1010 代码执行可读
!0000 0000 1100 0000  1001 1010 0000 0000  0000 0000 0000 0000 0000  0111 1111 1111
  

        .word   0x07FF    
        .word   0x0000
        .word   0x9200
        .word   0x00c0
!gdt描述符2 
!g=1 单位4k D/B=1 AVL=0 p=1 存在 DPL=0 特权0 S=1数据段或代码段 TYPE=0010 数据段可读写
!0000 0000 1100 0000 1001 0010 0000 0000  0000 0000 0000 0000 0000 0111 1111 1111

!下面分别是LIDT和LGDT指令的刘字节操作书
idt_48: .word 0               !表长度是0 
        .word 0,0             !基地址是0
gdt_48: .word 0x7ff           !表长度2048字节 可容纳256描述符
        .word 0x7c00+gdt,0    ! 基地之是0x7c0段的便宜gdt处
.org 510                      
         .word 0xAA55
